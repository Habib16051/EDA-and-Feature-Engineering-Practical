# -*- coding: utf-8 -*-
"""EDA and Feature Engineering Day-03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OFbCq4jM9jmIrZ2d4QXS5EClGg19c6Gq
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
# %matplotlib inline

# Importing the training data
df_train = pd.read_excel('/content/drive/MyDrive/EDA with Features Engineering (Kris Naik)/Flight Prediction/Data_Train.xlsx')

df_train.head()

df_train.info()

df_train.describe()

df_train.shape

df_train.isnull().sum()

df_test = pd.read_excel('/content/drive/MyDrive/EDA with Features Engineering (Kris Naik)/Flight Prediction/Data_test.xlsx')

df_test.head()

df_test.shape

df_test.info()

df_test.describe()

df_test.isnull().sum()

df = df_train.append(df_test)

df.head()

df.shape

df.isnull().sum()

df['Date_of_Journey'].str.split('/').str[0]

## Feature Engineering

df['Date']= df['Date_of_Journey'].str.split('/').str[0]
df['Month'] =df['Date_of_Journey'].str.split('/').str[1]
df['Year'] = df['Date_of_Journey'].str.split('/').str[2]

df.head(2)

df['Date'] = df['Date'].astype(int)
df['Month'] = df['Month'].astype(int)
df['Year'] = df['Year'].astype(int)

df.head()

df.info()

df.drop('Date_of_Journey',axis=1, inplace=True)

df.head()

df.head()

df['Arrival_Time'] = df['Arrival_Time'].str.split(' ').str[0]

df.isnull().sum()

df.head()

df['Arrival_hour'] = df['Arrival_Time'].str.split(':').str[0]
df['Arrival_min'] = df['Arrival_Time'].str.split(':').str[1]

df.head(1)

df['Arrival_hour'] = df['Arrival_hour'].astype(int)
df['Arrival_min'] = df['Arrival_min'].astype(int)

df.info()

df.drop('Arrival_Time',axis=1, inplace=True)

df.head(1)

df['Dep_hour'] = df['Dep_Time'].str.split(':').str[0]
df['Dep_min'] = df['Dep_Time'].str.split(':').str[1]

df.head()

df.drop('Dep_Time',axis=1,inplace=True)

df.head()

df['Dep_hour'] = df['Dep_hour'].astype(int)
df['Dep_min'] = df['Dep_min'].astype(int)

df.info()

df['Total_Stops'].unique()

df['Total_Stops'] = df['Total_Stops'].map({'non-stop':0,'1 stop':1,'2 stops':2,'3 stops':4, '4 stops':5, 'nan':1})

df.head()

df.drop('Route',axis=1,inplace=True)

df.head()

df['Additional_Info'].unique()

df.info()

df['duration_hour'] = df['Duration'].str.split(' ').str[0].str.split('h').str[0]

df.head()

df.info()

df[df['duration_hour']=='5m']

df.drop(6474,axis=0,inplace=True)
df.drop(2660,axis=0,inplace=True)

df['duration_hour'] = df['duration_hour'].astype(int)

df.info()

df['duration_min'] = df['Duration'].str.split(' ').str[1].str.split('m').str[1]

df.head()

df.drop('Duration',axis=1,inplace=True)

df.drop('duration_min',axis=1,inplace=True)

df.head()

df['Airline'].unique()

from sklearn.preprocessing import LabelEncoder

labelencoder = LabelEncoder()

df['Airline'] = labelencoder.fit_transform(df['Airline'])
df['Source'] = labelencoder.fit_transform(df['Source'])
df['Destination'] = labelencoder.fit_transform(df['Destination'])
df['Additional_Info'] = labelencoder.fit_transform(df['Additional_Info'])

df.shape

df.head()

df.drop('Additional_Infor',axis=1,inplace=True)

df.head()

df.shape

df.info()

df.info()

pd.get_dummies(df, columns=["Airline", "Source", "Destination", "Additional_Info"], drop_first=True)

