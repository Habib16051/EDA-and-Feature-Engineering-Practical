# -*- coding: utf-8 -*-
"""EDA and Feature Engineering Day-02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OZv2PtPLj6IiSibAvnlT699ECMy-ZGUd
"""



"""**Black friday dataset - EDA and Feature Engineering**

Cleaning and preparing the data for model training
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

import seaborn as sn

# %matplotlib inline
#Importing the training data
df_train = pd.read_csv('/content/drive/MyDrive/EDA with Features Engineering (Kris Naik)/black friday/train.csv')

df_train.head()

df_train.isnull().sum()

df_train.shape

#importing the test data

df_test = pd.read_csv('/content/drive/MyDrive/EDA with Features Engineering (Kris Naik)/black friday/test.csv')

df_test.head()

df_test.shape

# Merging both the train and test data

df = df_train.append(df_test)
df.head()

df.shape

df.isnull().sum()

# Basic

df.info()

df.describe()

df.drop(['User_ID'], axis=1, inplace=True)

df.head()

# Handling categorical feature Gender
df['Gender'] = df['Gender'].map({'F':0, 'M':1})
df.head()

## Handling categorical features Age

df['Age'].unique()

# Traget ordinal encoding
#Label encoding in python (can be done too)

df['Age'] = df['Age'].map({'0-17':1,'18-25':2,'26-35':3,'36-45':4, '46-50':5,'51-55':6,'55+':7})

# 2nd Technique

# Import label encoder
from sklearn import preprocessing
  
# label_encoder object knows how to understand word labels.
label_encoder = preprocessing.LabelEncoder()
  
# Encode labels in column 'species'.
df['Age']= label_encoder.fit_transform(df['Age'])
  
df['Age'].unique()

df.head()

# fixing categorical City_category
df_city = pd.get_dummies(df['City_Category'], drop_first = True)

df_city.head()

df = pd.concat([df,df_city],axis=1)
df.head()

# drop city category

df.drop('City_Category',axis=1, inplace=True)

df.head()

## Fixing mising values

df.isnull().sum()

## focus on replacing missing values
df['Product_Category_2'].unique()

df['Product_Category_2'].value_counts()

df['Product_Category_2'].mode()[0]

# Replace the missing value with mode

df['Product_Category_2'] = df['Product_Category_2'].fillna(df['Product_Category_2'].mode()[0])

df['Product_Category_2'].isnull().sum()



# Product category_3 replace missing values
df['Product_Category_3'].unique()

df['Product_Category_3'].value_counts()

# Replace the missing value with mode

df['Product_Category_3'] = df['Product_Category_3'].fillna(df['Product_Category_3'].mode()[0])

df.head()

df['Product_Category_3'].mode()[0]

df['Stay_In_Current_City_Years'].unique()

df['Stay_In_Current_City_Years'] = df['Stay_In_Current_City_Years'].str.replace('+','')

df.head()

df.info()

## Convert object into integer

df['Stay_In_Current_City_Years'] = df['Stay_In_Current_City_Years'].astype(int)

df.info()

df['B'] = df['B'].astype(int)

df['C'] = df['C'].astype(int)

df.info()

#visualization Age vs Purchase

sn.barplot('Age', 'Purchase', hue='Gender', data=df)

"""**Purchasing of men is high then women**"""

#visualization of Purchase with occupation

sn.barplot('Occupation', 'Purchase', hue = 'Gender', data=df)

#visualization Age vs Purchase

sn.barplot('Product_Category_1', 'Purchase', hue='Gender', data=df)

sn.barplot('Product_Category_2', 'Purchase', hue='Gender', data=df)

sn.barplot('Product_Category_3', 'Purchase', hue='Gender', data=df)

## Feature Scalling

df_test = df[df['Purchase'].isnull()]

df_train = df[~df['Purchase'].isnull()]

X = df_train.drop('Purchase',axis=1)

X.head()

y = df_train['Purchase']
y.head()



from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

X_train.drop('Product_ID',axis=1,inplace=True)

X_test.drop('Product_ID',axis=1,inplace=True)

# Features scalling

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)

y.shape

df.head()

df.drop('Product_ID', axis=1, inplace=True)

df.head()

#Train Your Model